version: '3.8'

x-airflow-common:
  &airflow-common
  build: ./build-infra/airflow/
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://${AIRFLOW_POSTGRES_USER}:${AIRFLOW_POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${AIRFLOW_POSTGRES_DB}"
    AIRFLOW__CELERY__RESULT_BACKEND: "db+postgresql://${AIRFLOW_POSTGRES_USER}:${AIRFLOW_POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${AIRFLOW_POSTGRES_DB}"
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'True'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
    AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT: 420
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.default'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__WEBSERVER__SECRET_KEY: "stock-market-analysis"
  volumes: 
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - stock-market-analysis-hdfs-config:/etc/hadoop
    - stock-market-analysis-spark-config:/spark/conf
  user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  namenode:
    build: ./build-infra/namenode/
    container_name: stock-market-analysis-namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - stock-market-analysis-hdfs-config:/opt/hadoop-3.3.6/etc/hadoop
      - ./data/namenode/data:/home/data
      - stock-market-analysis-hadoop-namenode:/hadoop/dfs/name

  datanode:
    build: ./build-infra/datanode/
    container_name: stock-market-analysis-datanode
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    volumes:
      - stock-market-analysis-hdfs-config:/opt/hadoop-3.3.6/etc/hadoop
      - stock-market-analysis-hadoop-datanode:/hadoop/dfs/data

  resourcemanager:
    build: ./build-infra/resourcemanager/
    container_name: stock-market-analysis-resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    volumes:
      - stock-market-analysis-hdfs-config:/opt/hadoop-3.3.6/etc/hadoop

  nodemanager:
    build: ./build-infra/nodemanager/
    container_name: stock-market-analysis-nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    volumes:
      - stock-market-analysis-hdfs-config:/opt/hadoop-3.3.6/etc/hadoop

  spark-master:
    build: ./build-infra/master/
    container_name: stock-market-analysis-spark-master
    restart: always
    depends_on:
      - namenode
      - datanode
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - stock-market-analysis-hdfs-config:/etc/hadoop
      - stock-market-analysis-spark-config:/spark/conf
      - ./data/master/data:/home/data

  spark-worker-1:
    build: ./build-infra/worker/
    container_name: stock-market-analysis-spark-worker-1
    restart: always
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      SPARK_MASTER: "spark://spark-master:7077"
    volumes:
      - stock-market-analysis-hdfs-config:/etc/hadoop
      - stock-market-analysis-spark-config:/spark/conf

  spark-worker-2:
    build: ./build-infra/worker/
    container_name: stock-market-analysis-spark-worker-2
    restart: always
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    environment:
      SPARK_MASTER: "spark://spark-master:7077"
    volumes:
      - stock-market-analysis-hdfs-config:/etc/hadoop
      - stock-market-analysis-spark-config:/spark/conf

  hive-server:
    build: ./build-infra/hive-server
    container_name: stock-market-analysis-hive-server
    restart: always
    environment:
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - "10000:10000"
    volumes:
      - stock-market-analysis-hive-config:/opt/hive/conf/
      - stock-market-analysis-hdfs-config:/etc/hadoop
      - stock-market-analysis-hdfs-config:/opt/hadoop-3.3.6/etc/hadoop

  hive-metastore:
    image: caotrunghieu192/base-hive:latest
    container_name: stock-market-analysis-hive-metastore
    restart: always
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 postgres:5432"
    ports:
      - "9083:9083"
    volumes:
      - stock-market-analysis-hive-config:/opt/hive/conf/
      - stock-market-analysis-hdfs-config:/etc/hadoop
      - stock-market-analysis-hdfs-config:/opt/hadoop-3.3.6/etc/hadoop
  
  postgres:
    build: ./build-infra/postgres-build/
    container_name: stock-market-analysis-postgres
    environment:
      POSTGRES_USER: "${AIRFLOW_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${AIRFLOW_POSTGRES_PASSWORD}"
      POSTGRES_DB: "${AIRFLOW_POSTGRES_DB}"
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - stock-market-analysis-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${AIRFLOW_POSTGRES_USER}"]
      interval: 30s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:7.2.3
    container_name: stock-market-analysis-redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
  
  airflow-webserver:
    <<: *airflow-common
    container_name: stock-market-analysis-airflow-webserver
    environment:
      <<: *airflow-common-env
      AIRFLOW__WEBSERVER__HIDE_PAUSED_DAGS_BY_DEFAULT: 'True'
      AIRFLOW__CORE__LOGGING_LEVEL: ERROR
    command: webserver
    ports:
      - "${AIRFLOW_WEBSERVER_PORT}:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 300s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  airflow-scheduler:
    <<: *airflow-common
    container_name: stock-market-analysis-airflow-scheduler
    environment:
      <<: *airflow-common-env
      AIRFLOW__SCHEDULER__SCHEDULER_HEARTBEAT_SEC: 20
      AIRFLOW__CORE__LOGGING_LEVEL: ERROR
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  airflow-worker:
    <<: *airflow-common
    container_name: stock-market-analysis-airflow-worker
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  airflow-triggerer:
    <<: *airflow-common
    container_name: stock-market-analysis-airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    environment:
      <<: *airflow-common-env
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  airflow-cli:
    <<: *airflow-common
    container_name: stock-market-analysis-airflow-cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
  
  flower:
    <<: *airflow-common
    container_name: stock-market-analysis-airflow-flower
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    environment:
      <<: *airflow-common-env
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        # if (( airflow_version_comparable < min_airflow_version_comparable )); then
        #   echo
        #   echo "Airflow current version: $${airflow_version_comparable}"
        #   echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
        #   echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
        #   echo
        #   exit 1
        # fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'True'
      _AIRFLOW_WWW_USER_CREATE: 'True'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
  
  zookeeper:
    image: zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"

  kafka:
    build: ./build-infra/kafka/
    container_name: kafka
    ports:
      - "9092:9092"
    restart: always
    volumes:
      - stock-market-analysis-kafka-config:/opt/kafka_home/config

volumes:
  stock-market-analysis-hadoop-namenode:
  stock-market-analysis-hadoop-datanode:
  stock-market-analysis-postgres-data:
  stock-market-analysis-hdfs-config:
    driver_opts:
      device: ./config/hadoop/
      o: bind
      type: bridge
  stock-market-analysis-hive-config:
    driver_opts:
      device: ./config/hive/
      o: bind
      type: bridge
  stock-market-analysis-spark-config:
    driver_opts:
      device: ./config/spark/
      o: bind
      type: bridge
  stock-market-analysis-kafka-config:
    driver_opts:
      device: ./config/kafka/
      o: bind
      type: bridge
    

networks:
  default:
    name: hdfs-network
    